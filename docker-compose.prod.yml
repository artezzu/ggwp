version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: abstract_hr_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-5533951}
      POSTGRES_DB: ${POSTGRES_DB:-abstract_hr}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: abstract_hr_backend
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-5533951}@postgres:5432/${POSTGRES_DB:-abstract_hr}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://your-domain.com}
      - BOT_TOKEN=${BOT_TOKEN}
      - HH_API_CLIENT_ID=${HH_API_CLIENT_ID}
      - HH_API_CLIENT_SECRET=${HH_API_CLIENT_SECRET}
    restart: unless-stopped
    volumes:
      - backend_data:/app/resumes
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - API_URL=${API_URL:-https://your-domain.com/api}
    container_name: abstract_hr_frontend
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: abstract_hr_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  backend_data:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge 